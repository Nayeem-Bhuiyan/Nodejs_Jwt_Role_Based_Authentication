{"ast":null,"code":"import { HttpEventType, HttpResponse } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"src/app/services/file/file-control.service\";\nimport * as i3 from \"@angular/common\";\n\nconst _c0 = function (a0) {\n  return {\n    width: a0\n  };\n};\n\nfunction FileUploadComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 13)(1, \"span\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\", 14)(4, \"div\", 15);\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd()()();\n  }\n\n  if (rf & 2) {\n    const progressInfo_r4 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(progressInfo_r4.fileName);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngStyle\", i0.ɵɵpureFunction1(4, _c0, progressInfo_r4.value + \"%\"));\n    i0.ɵɵattribute(\"aria-valuenow\", progressInfo_r4.value);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", progressInfo_r4.value, \"% \");\n  }\n}\n\nfunction FileUploadComponent_img_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"img\", 16);\n  }\n\n  if (rf & 2) {\n    const previewImage_r5 = ctx.$implicit;\n    i0.ɵɵproperty(\"src\", previewImage_r5, i0.ɵɵsanitizeUrl);\n  }\n}\n\nfunction FileUploadComponent_div_11_ul_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ul\")(1, \"li\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const msg_r7 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(msg_r7);\n  }\n}\n\nfunction FileUploadComponent_div_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 17);\n    i0.ɵɵtemplate(1, FileUploadComponent_div_11_ul_1_Template, 3, 1, \"ul\", 18);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r2.message);\n  }\n}\n\nfunction FileUploadComponent_ul_15_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ul\", 19)(1, \"li\", 20)(2, \"p\")(3, \"a\", 21);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelement(5, \"img\", 22);\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const image_r9 = ctx.$implicit;\n    i0.ɵɵadvance(3);\n    i0.ɵɵpropertyInterpolate(\"href\", image_r9.url, i0.ɵɵsanitizeUrl);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(image_r9.name);\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate(\"src\", image_r9.url, i0.ɵɵsanitizeUrl);\n    i0.ɵɵpropertyInterpolate(\"alt\", image_r9.name);\n  }\n}\n\nexport class FileUploadComponent {\n  constructor(fb, _fileService) {\n    this.fb = fb;\n    this._fileService = _fileService;\n    this.progressInfos = [];\n    this.message = [];\n    this.previewImages = [];\n    this.frmData = this.fb.group({//name: [''],\n      //email: [''],\n    });\n  }\n\n  ngOnInit() {\n    //this.imageInfos = this._fileService.getFiles().subscribe({\n    this._fileService.getFiles().subscribe({\n      next: data => {\n        data.forEach(element => {\n          console.log(element);\n        });\n      },\n      error: error => console.error(error),\n      complete: () => console.info('complete')\n    });\n  }\n\n  showUploadPreview(event) {\n    this.message = [];\n    this.progressInfos = [];\n    this.selectedFiles = event.target.files;\n    this.previewImages = [];\n\n    if (this.selectedFiles && this.selectedFiles[0]) {\n      const numberOfFiles = this.selectedFiles.length;\n\n      for (let i = 0; i < numberOfFiles; i++) {\n        const reader = new FileReader();\n\n        reader.onload = e => {\n          this.previewImages.push(e.target.result);\n        };\n\n        reader.readAsDataURL(this.selectedFiles[i]);\n      }\n    }\n  }\n\n  upload(idx, file) {\n    this.progressInfos[idx] = {\n      value: 0,\n      fileName: file.name\n    };\n\n    if (file) {\n      this._fileService.upload(file).subscribe({\n        next: event => {\n          if (event.type === HttpEventType.UploadProgress) {\n            this.progressInfos[idx].value = Math.round(100 * event.loaded / event.total);\n          } else if (event instanceof HttpResponse) {\n            const msg = 'Uploaded the file successfully: ' + file.name;\n            this.message.push(msg);\n            this.imageInfos = this._fileService.getFiles();\n          }\n        },\n        error: err => {\n          this.progressInfos[idx].value = 0;\n          const msg = 'Could not upload the file: ' + file.name;\n          this.message.push(msg);\n        }\n      });\n    }\n  }\n\n  submitForm() {\n    this.message = [];\n\n    if (this.selectedFiles) {\n      for (let i = 0; i < this.selectedFiles.length; i++) {\n        this.upload(i, this.selectedFiles[i]);\n      }\n    }\n  }\n\n}\n\nFileUploadComponent.ɵfac = function FileUploadComponent_Factory(t) {\n  return new (t || FileUploadComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.FileControlService));\n};\n\nFileUploadComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: FileUploadComponent,\n  selectors: [[\"app-file-upload\"]],\n  decls: 17,\n  vars: 8,\n  consts: [[\"class\", \"mb-2\", 4, \"ngFor\", \"ngForOf\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"row\"], [1, \"col-8\"], [1, \"btn\", \"btn-default\", \"p-0\"], [\"type\", \"file\", \"accept\", \"image/*\", \"multiple\", \"\", 3, \"change\"], [1, \"col-4\"], [1, \"btn\", \"btn-success\", \"btn-sm\", 3, \"disabled\"], [\"class\", \"preview\", 3, \"src\", 4, \"ngFor\", \"ngForOf\"], [\"class\", \"alert alert-secondary my-3\", \"role\", \"alert\", 4, \"ngIf\"], [1, \"card\", \"mt-3\"], [1, \"card-header\"], [\"class\", \"list-group list-group-flush\", 4, \"ngFor\", \"ngForOf\"], [1, \"mb-2\"], [1, \"progress\"], [\"role\", \"progressbar\", \"aria-valuemin\", \"0\", \"aria-valuemax\", \"100\", 1, \"progress-bar\", \"progress-bar-info\", 3, \"ngStyle\"], [1, \"preview\", 3, \"src\"], [\"role\", \"alert\", 1, \"alert\", \"alert-secondary\", \"my-3\"], [4, \"ngFor\", \"ngForOf\"], [1, \"list-group\", \"list-group-flush\"], [1, \"list-group-item\"], [3, \"href\"], [\"height\", \"80px\", 3, \"src\", \"alt\"]],\n  template: function FileUploadComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, FileUploadComponent_div_0_Template, 6, 6, \"div\", 0);\n      i0.ɵɵelementStart(1, \"form\", 1);\n      i0.ɵɵlistener(\"ngSubmit\", function FileUploadComponent_Template_form_ngSubmit_1_listener() {\n        return ctx.submitForm();\n      });\n      i0.ɵɵelementStart(2, \"div\", 2)(3, \"div\", 3)(4, \"label\", 4)(5, \"input\", 5);\n      i0.ɵɵlistener(\"change\", function FileUploadComponent_Template_input_change_5_listener($event) {\n        return ctx.showUploadPreview($event);\n      });\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(6, \"div\", 6)(7, \"button\", 7);\n      i0.ɵɵtext(8, \" Save \");\n      i0.ɵɵelementEnd()()()();\n      i0.ɵɵelementStart(9, \"div\");\n      i0.ɵɵtemplate(10, FileUploadComponent_img_10_Template, 1, 1, \"img\", 8);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(11, FileUploadComponent_div_11_Template, 2, 1, \"div\", 9);\n      i0.ɵɵelementStart(12, \"div\", 10)(13, \"div\", 11);\n      i0.ɵɵtext(14, \"List of Images\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(15, FileUploadComponent_ul_15_Template, 6, 4, \"ul\", 12);\n      i0.ɵɵpipe(16, \"async\");\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngForOf\", ctx.progressInfos);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"formGroup\", ctx.frmData);\n      i0.ɵɵadvance(6);\n      i0.ɵɵproperty(\"disabled\", !ctx.selectedFiles);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngForOf\", ctx.previewImages);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.message.length);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(16, 6, ctx.imageInfos));\n    }\n  },\n  dependencies: [i3.NgForOf, i3.NgIf, i3.NgStyle, i1.ɵNgNoValidate, i1.NgControlStatusGroup, i1.FormGroupDirective, i3.AsyncPipe],\n  styles: [\".preview[_ngcontent-%COMP%] {\\r\\n    width: 200px;\\r\\n    height: 200px;\\r\\n    margin-right: 5px;\\r\\n  }\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZpbGUtdXBsb2FkLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7SUFDSSxZQUFZO0lBQ1osYUFBYTtJQUNiLGlCQUFpQjtFQUNuQiIsImZpbGUiOiJmaWxlLXVwbG9hZC5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLnByZXZpZXcge1xyXG4gICAgd2lkdGg6IDIwMHB4O1xyXG4gICAgaGVpZ2h0OiAyMDBweDtcclxuICAgIG1hcmdpbi1yaWdodDogNXB4O1xyXG4gIH0iXX0= */\"]\n});","map":{"version":3,"mappings":"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","names":["HttpEventType","HttpResponse","i0","FileUploadComponent","constructor","fb","_fileService","frmData","group","ngOnInit","getFiles","subscribe","next","data","forEach","element","console","log","error","complete","info","showUploadPreview","event","message","progressInfos","selectedFiles","target","files","previewImages","numberOfFiles","length","i","reader","FileReader","onload","e","push","result","readAsDataURL","upload","idx","file","value","fileName","name","type","UploadProgress","Math","round","loaded","total","msg","imageInfos","err","submitForm","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["E:\\TestProject\\Nodejs\\04-08-2022\\Nodejs_Jwt_Role_Based_Authentication\\Nodejs_Jwt_Role_Based_Authentication\\client\\src\\app\\components\\file-upload\\file-upload.component.ts","E:\\TestProject\\Nodejs\\04-08-2022\\Nodejs_Jwt_Role_Based_Authentication\\Nodejs_Jwt_Role_Based_Authentication\\client\\src\\app\\components\\file-upload\\file-upload.component.html"],"sourcesContent":["import { HttpErrorResponse, HttpEventType, HttpResponse } from '@angular/common/http';\nimport { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport { Observable } from 'rxjs';\nimport { FileControlService } from 'src/app/services/file/file-control.service';\n\n@Component({\n  selector: 'app-file-upload',\n  templateUrl: './file-upload.component.html',\n  styleUrls: ['./file-upload.component.css']\n})\nexport class FileUploadComponent implements OnInit {\n  frmData: FormGroup;\n  selectedFiles?: FileList;\n  progressInfos: any[] = [];\n  message: string[] = [];\n\n  previewImages: string[] = [];\n  imageInfos?: Observable<any>;\n\n  constructor(public fb: FormBuilder,private _fileService: FileControlService) {\n    this.frmData = this.fb.group({\n      //name: [''],\n      //email: [''],\n    });\n   }\n\n  ngOnInit(): void {\n    //this.imageInfos = this._fileService.getFiles().subscribe({\n     this._fileService.getFiles().subscribe({\n      next: (data) => {\n       \n          data.forEach(element => {\n            console.log(element);\n          });\n         \n      },\n      error: (error: HttpErrorResponse) => console.error(error),\n      complete: () => console.info('complete'),\n    });\n    \n  }\n\n  showUploadPreview(event: any): void {\n    this.message = [];\n    this.progressInfos = [];\n    this.selectedFiles = event.target.files;\n\n    this.previewImages = [];\n    if (this.selectedFiles && this.selectedFiles[0]) {\n      const numberOfFiles = this.selectedFiles.length;\n      for (let i = 0; i < numberOfFiles; i++) {\n        const reader = new FileReader();\n        reader.onload = (e: any) => {\n          this.previewImages.push(e.target.result);\n        };\n        reader.readAsDataURL(this.selectedFiles[i]);\n      }\n    }\n  }\n\n  upload(idx: number, file: File): void {\n    this.progressInfos[idx] = { value: 0, fileName: file.name };\n\n    if (file) {\n      this._fileService.upload(file).subscribe({\n        next: (event: any) => {\n          if (event.type === HttpEventType.UploadProgress) {\n            this.progressInfos[idx].value = Math.round(100 * event.loaded / event.total);\n          } else if (event instanceof HttpResponse) {\n            const msg = 'Uploaded the file successfully: ' + file.name;\n            this.message.push(msg);\n            this.imageInfos = this._fileService.getFiles();\n          }\n        },\n        error: (err: any) => {\n          this.progressInfos[idx].value = 0;\n          const msg = 'Could not upload the file: ' + file.name;\n          this.message.push(msg);\n        }});\n    }\n  }\n\n  submitForm(): void {\n    this.message = [];\n    if (this.selectedFiles) {\n      for (let i = 0; i < this.selectedFiles.length; i++) {\n        this.upload(i, this.selectedFiles[i]);\n      }\n    }\n  }\n}\n","<div *ngFor=\"let progressInfo of progressInfos\" class=\"mb-2\">\n    <span>{{ progressInfo.fileName }}</span>\n    <div class=\"progress\">\n      <div\n        class=\"progress-bar progress-bar-info\"\n        role=\"progressbar\"\n        attr.aria-valuenow=\"{{ progressInfo.value }}\"\n        aria-valuemin=\"0\"\n        aria-valuemax=\"100\"\n        [ngStyle]=\"{ width: progressInfo.value + '%' }\"\n      >\n        {{ progressInfo.value }}%\n      </div>\n    </div>\n  </div>\n\n\n  <form [formGroup]=\"frmData\" (ngSubmit)=\"submitForm()\">\n  <div class=\"row\">\n    <div class=\"col-8\">\n      <label class=\"btn btn-default p-0\">\n        <input type=\"file\" accept=\"image/*\" multiple (change)=\"showUploadPreview($event)\" />\n      </label>\n    </div>\n\n    <div class=\"col-4\">\n      <button\n        class=\"btn btn-success btn-sm\"\n        [disabled]=\"!selectedFiles\">\n        Save\n      </button>\n    </div>\n    \n  </div>\n</form>\n\n\n  <div>\n    <img *ngFor='let previewImage of previewImages' [src]=\"previewImage\" class=\"preview\">\n  </div>\n  \n  <div *ngIf=\"message.length\" class=\"alert alert-secondary my-3\" role=\"alert\">\n    <ul *ngFor=\"let msg of message; let i = index\">\n      <li>{{ msg }}</li>\n    </ul>\n  </div>\n  \n  <div class=\"card mt-3\">\n    <div class=\"card-header\">List of Images</div>\n    <ul class=\"list-group list-group-flush\" *ngFor=\"let image of imageInfos | async\">\n      <li class=\"list-group-item\">\n        <p><a href=\"{{ image.url }}\">{{ image.name }}</a></p>\n        <img src=\"{{ image.url }}\" alt=\"{{ image.name }}\" height=\"80px\" />\n      </li>\n    </ul>\n  </div>\n"]},"metadata":{},"sourceType":"module"}